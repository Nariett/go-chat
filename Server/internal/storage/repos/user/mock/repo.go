// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	Proto "github.com/Nariett/go-chat/Proto"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetUserId mocks base method.
func (m *MockStore) GetUserId(name string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", name)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockStoreMockRecorder) GetUserId(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockStore)(nil).GetUserId), name)
}

// GetUserIdWithUpdateActivity mocks base method.
func (m *MockStore) GetUserIdWithUpdateActivity(user *Proto.UserData) (*Proto.ServerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdWithUpdateActivity", user)
	ret0, _ := ret[0].(*Proto.ServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdWithUpdateActivity indicates an expected call of GetUserIdWithUpdateActivity.
func (mr *MockStoreMockRecorder) GetUserIdWithUpdateActivity(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdWithUpdateActivity", reflect.TypeOf((*MockStore)(nil).GetUserIdWithUpdateActivity), user)
}

// GetUsers mocks base method.
func (m *MockStore) GetUsers() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStoreMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStore)(nil).GetUsers))
}

// InsertUser mocks base method.
func (m *MockStore) InsertUser(user *Proto.UserData) (*Proto.ServerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(*Proto.ServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockStoreMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockStore)(nil).InsertUser), user)
}
